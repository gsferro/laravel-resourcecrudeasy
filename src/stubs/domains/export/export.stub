<?php

namespace App\Domains\{{ modulo }}\{{ table_name_singular_camel_ucfirst }}\Exports;

use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Illuminate\Support\Collection;

class {{ table_name_camel_ucfirst }}Export implements FromArray, ShouldAutoSize, WithEvents
{
    public function __construct(private Collection ${{ table_name_camel }}){}

    public function array(): array
    {
        return [];
    }

    /**
     * @return \Closure[]
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $event->sheet->getStyle('A1:AF1')->applyFromArray([
                    'font' => [
                        'bold' => true
                    ]
                ]);

                //https://phpspreadsheet.readthedocs.io/en/latest/topics/accessing-cells/#setting-a-range-of-cells-from-an-array
                //https://laracasts.com/discuss/channels/laravel/advanced-format-of-laravel-excel-maatwebsites-for-export


                $data = [];
                foreach ($this->{{ table_name_camel }} as $key => ${{ table_name_singular_camel }}) {

                    {{ column_data }}

                    $rows = $data;
                    $headings = [];
                    foreach ($rows as $array) {
                        foreach ($array as $key => $value) {
                            if (!in_array($key, $headings)) {
                                $headings[] = $key;
                            }
                        }
                    }

                    //Escreve os tÃ­tulos das colunas
                    foreach ($headings as $key2 => $value) {
                        $event->sheet->getDelegate()->setCellValueByColumnAndRow($key2 + 1, 1, $value);
                    }

                    //Escreve os os valores das linhas de acordo com as colunas
                    foreach ($rows as $key_row => $row) {
                        foreach ($headings as $key_col => $col) {
                            if (isset($row[$col]) && !empty($row[$col])) {
                                $event->sheet->getDelegate()->setCellValueByColumnAndRow($key_col + 1, $key_row + 2, $row[$col]);
                            }
                        }
                    }
                }
            }
        ];
    }
}