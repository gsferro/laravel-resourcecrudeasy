<?php

use App\Models\{{ class }};
use Illuminate\Support\Facades\Route;

beforeEach(function () {
    $routesByName    = Route::getRoutes()->getRoutesByName();
    $this->routes    = [];
    $this->routeName = '{{ class_route_slug }}.';

    foreach ($routesByName as $name => $route) {

        if (!str_contains($name, $this->routeName)) {
            continue;
        }
        $this->routes[$name] = $route;
    }

    // atributo para reuso
    $this->controllerName = 'App\Http\Controllers\{{ class }}Controller';
    $this->controller     = app()->make($this->controllerName);
});

test('{{ class }}Controller is Controller', function()
{
    expect($this->controller)
        ->toBeInstanceOf(\App\Http\Controllers\Controller::class);
})->group( 'configured');

test('The Controller is config from package ResourceCrudEasy', function (){
    // use trait
    expect(class_uses($this->controllerName))
        ->toBeArray()
        ->toHaveKey('Gsferro\ResourceCrudEasy\Traits\ResourceCrudEasy')
    ;
});

test('The Routes Resource exists', function ()
{
    expect($this->routes)
        ->toBeArray()
        ->not()->toBeEmpty()
        ->toBeGreaterThanOrEqual(7); // 7 route resource
});

test('The Actions routes handled Resource Controller', function ()
{
    if (empty($this->routes)) {
        $this->markTestSkipped('Routes not implemented');
    }

    $methods = [
        'index'   => 'GET',
        'create'  => 'GET',
        'store'   => 'POST',
        'show'    => 'GET',
        'edit'    => 'GET',
        'update'  => 'PUT',
        'destroy' => 'DELETE',
    ];

    foreach ($this->routes as $route) {
        $method = str_replace($this->routeName, '', $route->action["as"]);

        // exists
        expect($route)->not()->toBeEmpty();

        // method use verb
        expect($route->methods)->toBeArray()->toContain($methods[$method]);

        // alias use method in controller
        expect($route->action['controller'])
            ->not()->toBeEmpty()
            ->toEqual("{$this->controllerName}@{$method}");

        expect(method_exists($this->controller, $method))->toBeTrue();
    }
});

test('Attribute model instanced is {{ class }}', function () {
    expect($this->controller->model)
        ->toBeInstanceOf({{ class }}::class);
});

/**
 * TODO package autovalidate
*/
test('Rules use in controller is a configured in model', function () {
    expect($this->controller->rules())
        ->toBeArray()
        ->toEqual({{ class }}::$rules)
    ;
});
