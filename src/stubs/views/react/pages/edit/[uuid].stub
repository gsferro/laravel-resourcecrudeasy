// ** React Imports
import { useState, useEffect } from 'react'

// ** MUI Imports
import Box from '@mui/material/Box'
import Grid from '@mui/material/Grid'
import Card from '@mui/material/Card'
import MenuItem from '@mui/material/MenuItem'
import TextField from '@mui/material/TextField'
import InputLabel from '@mui/material/InputLabel'
import CardContent from '@mui/material/CardContent'
import Select from '@mui/material/Select'
import Button from '@mui/material/Button'
import FormControl from '@mui/material/FormControl'
import FormHelperText from '@mui/material/FormHelperText'
import Typography from '@mui/material/Typography'

// ** Third Party Imports
import * as yup from 'yup'
import { yupResolver } from '@hookform/resolvers/yup'
import { useForm, Controller } from 'react-hook-form'
import toast from 'react-hot-toast'

import { useRouter } from 'next/router'

import providersConfig from 'src/configs/{{ class_folder }}/providers'
import authConfig from 'src/configs/auth'

import { ProviderTypes } from 'src/types/{{ class_folder }}/providers/ProviderTypes'

// ** Third Party Imports
import axios from 'axios'

const schema = yup.object().shape({
  name: yup.string().required('Nome é um campo obrigatório'),
  status: yup.string().required('Situação é um campo obrigatório')
})

const defaultValues = {
  name: '',
  status: ''
}

interface ProviderData {
  name: string
  status: string
}

const ProviderEdit = () => {
  const [provider, setProvider] = useState<ProviderTypes>()

  const {
    control,
    handleSubmit,
    setValue,
    formState: { errors }
  } = useForm({
    defaultValues,
    mode: 'onChange',
    resolver: yupResolver(schema)
  })

  useEffect(() => {
    getProvider()
  }, [])

  const router = useRouter()
  const { uuid } = router.query

  const getProvider = async () => {
    const res = await axios.get(providersConfig.getProviderEndPoint + uuid, {
      headers: {
        Authorization: window.localStorage.getItem(authConfig.storageTokenKeyName)!
      }
    })
    setProvider(res.data.data)
    setValue('name', res.data.data.name)
    setValue('status', res.data.data.status)
  }

  const onSubmit = async (data: ProviderData) => {
    await axios
      .put(providersConfig.updateEndpoint + uuid, data, {
        headers: {
          Authorization: window.localStorage.getItem(authConfig.storageTokenKeyName)!
        }
      })
      .then(async () => {
        toast.success('{{ class_title }} editado com sucesso!')
        router.push('/{{ class_folder }}/providers')
      })
      .catch(() => {
        toast.error('Não foi possivel editar o {{ class_title }}.')
      })
  }

  return (
    <Grid container spacing={6}>
      <Grid item xs={12}>
        <Card>
          <CardContent>
            <Box sx={{ mb: 8, textAlign: 'center' }}>
              <Typography variant='h5' sx={{ mb: 3, lineHeight: '2rem' }}>
                Editar {{ class_title }} #{provider?.id}
              </Typography>
            </Box>
            <Box sx={{ p: 5 }}>
              <form onSubmit={handleSubmit(onSubmit)}>
                <FormControl fullWidth sx={{ mb: 6 }}>
                  <Controller
                    name='name'
                    control={control}
                    rules={{ required: true }}
                    render={({ field: { value, onChange } }) => (
                      <TextField
                        value={value}
                        label='Nome'
                        onChange={onChange}
                        placeholder='Nome'
                        error={Boolean(errors.name)}
                      />
                    )}
                  />
                  {errors.name && <FormHelperText sx={{ color: 'error.main' }}>{errors.name.message}</FormHelperText>}
                </FormControl>
                <FormControl fullWidth sx={{ mb: 6 }}>
                  <InputLabel id='status-select'>Situação</InputLabel>

                  <Controller
                    name='status'
                    control={control}
                    rules={{ required: true }}
                    render={({ field: { value, onChange } }) => (
                      <Select
                        fullWidth
                        value={value}
                        id='select-status'
                        label='Situação'
                        labelId='status-select'
                        error={Boolean(errors.status)}
                        onChange={e => onChange(e.target.value)}
                        inputProps={{ placeholder: 'Selecionar Situação' }}
                      >
                        <MenuItem value='1'>Ativo</MenuItem>
                        <MenuItem value='2'>Inativo</MenuItem>
                      </Select>
                    )}
                  />
                  {errors.status && (
                    <FormHelperText sx={{ color: 'error.main' }}>{errors.status.message}</FormHelperText>
                  )}
                </FormControl>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <Button size='large' type='submit' variant='contained' sx={{ mr: 3 }}>
                    Salvar
                  </Button>
                </Box>
              </form>
            </Box>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  )
}

export default ProviderEdit
