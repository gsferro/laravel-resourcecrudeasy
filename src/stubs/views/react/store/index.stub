// ** Redux Imports
import { Dispatch } from 'redux'
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'


// ** Config
import {{ table_name_camel }}Config from 'src/configs/{{ modulo }}/{{ table_name }}'
import authConfig from 'src/configs/auth'

// ** Axios Imports
import axios from 'axios'

// ** Third Party Components
import toast from 'react-hot-toast'

interface DataParams {
  page: number
  pageSize: number
  {{ columns_json_without_uuid_only_strings }}
  orderBy: string | any
  sortedBy: string | any
}

interface Redux {
  getState: any
  dispatch: Dispatch<any>
}

// ** Fetch
export const fetchData = createAsyncThunk('app{{ table_name_camel_ucfirst }}/fetchData', async (params: DataParams) => {
  console.log({{ table_name_camel }}Config.listEndpoint)
  const response = await axios.get({{ table_name_camel }}Config.listEndpoint,{
    headers: {
      Authorization: window.localStorage.getItem(authConfig.storageTokenKeyName)!
    },
    params
  })

  return response.data
})

// ** Delete
export const delete{{ table_name_camel_ucfirst }} = createAsyncThunk(
  'app{{ table_name_camel_ucfirst }}/delete{{ table_name_camel_ucfirst }}',
  async (uuid: string | string, { getState, dispatch }: Redux) => {
    await axios.delete({{ table_name_camel }}Config.deleteEndpoint + uuid,{
      headers: {
        Authorization: window.localStorage.getItem(authConfig.storageTokenKeyName)!
      }
    })
    .then(async () => {
      toast.success('{{ table_name_camel_ucfirst }} deletado com sucesso!')
      dispatch(fetchData(getState().{{ table_singular }}.params))
    })
    .catch(() => {
      toast.error("Não foi possível deletar o {{ table_name_camel_ucfirst }}.")
    })
  }
)

export const app{{ table_name_camel_ucfirst }}Slice = createSlice({
  name: 'app{{ table_name_camel_ucfirst }}',
  initialState: {
    data: [],
    total: 1,
    loading: false,
    params: {},
    allData: []
  },
  reducers: {},
  extraReducers: builder => {
    builder.addCase(fetchData.fulfilled, (state, action) => {
      state.data = action?.payload?.data ?? []
      state.total = action?.payload?.meta?.total ?? 0
      state.params = action?.payload?.params
      state.allData = action?.payload?.data ?? []
      state.loading = false
    })

    builder.addCase(fetchData.pending, (state) => {
      state.loading = true
    })
  }
})

export default app{{ table_name_camel_ucfirst }}Slice.reducer
